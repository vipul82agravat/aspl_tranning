. Regular expression

    ->regular expressions, how to write make pattern to match and replace withing strings.
    ->Regular expression can be used anywhere like PHP, Mysql, Javascript, Linux nd and replace commands




    .Quanti­fiers

        -*
            0 or more {3} Exactly 3

        +
            1 or more {3,}  3 or more
        ?
            0 or 1 {3,5}    3, 4 or 5


    .Anchors
            ^
                -Start of string, or start of line in multi-line pattern
            \A
                -Start of string

            $
                End of string, or end of line in multi-line pattern
            \Z
                End of string
            \b

                -Word boundary
            \B
                Not word boundary

             \<
                Start of word
             \>
                End of word
    .Groups and Ranges

            .
                Any character except new line (\n)
           (a|b)
                a or b
           (...)
                Group

           (?:...)
                Passive (non-c­apt­uring) group
            [abc]
                    Range (a or b or c)

             [^abc]
                    Not (a or b or c)
             [a-q]
                    Lower case letter from a to q
             [A-Q]
                    Upper case letter from A to Q
             [0-7]
                Digit from 0 to 7
              \x
                Group/­sub­pattern number "­x"

    .Pattern Modifiers

            -g
                Global match
            -i *
                Case-i­nse­nsitive
            -m *
                Multiple lines
            -s *
                Treat string as single line
            -x *
                Allow comments and whitespace in pattern
            -e *
                Evaluate replac­ement
            -U *
                Ungreedy pattern
            - * PCRE modifier


    .Word Boundaries
            -\b
                Word boundary



    ============================
    Characters
        -Special Characters

            -\n
                    New line
            -\r
                    Carriage return
            -\t
                    Tab
            \v
                    Vertical tab

            \f
                    Form feed
             \xxx
                    Octal character xxx
             \xhh
                Hex character hh

        -Common metacharactes


            ^  [  .  $
            {  *  (  \
            +   ) | ?
            <   >


        -Predened Character Classes


            -\c
                    Control character
            -\s
                    White space
            -\S
                    Not white space
            -\d
                        Digit
            -\D
                        Not digit
            -\w
                        Word
            -\W
                        Not word
            -\x
                        Hexade­cimal digit
            -\O
                    Octal digit

     Posix

        -[:upper:]
                Upper case letters
        -[:lower:]
                Lower case letters
        -[:alpha:]
                All letters
         -[:alnum:]
                Digits and letters
        -[:digit:]
                Digits
         -[:xdigit:]
                Hexade­cimal digits
        -[:punct:]
                Punctu­ation
         -[:blank:]
            Space and tab
        -[:space:]
                Blank characters
         -[:cntrl:]
                Control characters
          -[:graph:]
                Printed characters
          -[:print:]
            Printed characters and spaces
          -[:word:]
            Digits, letters and underscore

     Assertions


         ?=
            Lookahead assertion
         ?!
            Negative lookahead
         ?<=
            Lookbehind assertion

         ?!= or ?<!
            Negative lookbehind
         ?>
            Once-only Subexp­ression
         ?()
            Condition [if then]

         ?()|
            Condition [if then else]
          ?#
            Comment
    ===============================

    Escape Sequences

        \
            Escape following character
        \Q
            Begin literal sequence
         \E
            End literal sequence


           -"­Esc­api­ng" is a way of treating characters which have a special meaning in regular expres­sions literally, rather than as special charac­ters.

    String Replac­ement
        -$n
            nth non-pa­ssive group
        -$2
            "­xyz­" in /^(abc­(xy­z))$/

        -$1
            "­xyz­" in /^(?:a­bc)­(xyz)$/

        -$`
            Before matched string
        -$'
            After matched string
         $+
            Last matched string
        $&
            Entire matched string




            =>Regular Expressions, commonly known as "regex" or "RegExp", are a specially formatted text strings used to find patterns in text.


            -preg_match()	Perform a regular expression match.

            -preg_match_all()	Perform a global regular expression match.
            -preg_replace()	Perform a regular expression search and replace.
            -preg_grep()	Returns the elements of the input array that matched the pattern.

            -preg_split()	Splits up a string into substrings using a regular expression.

            preg_quote()	Quote regular expression characters found within a string.



            Note: The PHP preg_match() function stops searching after it finds the first match, whereas the preg_match_all() function continues searching until the end of the string and find all possible matches instead of stopping at the first match.



            Regular Expression Syntax

                        . * ? + [ ] ( ) { } ^ $ | \.



                         You will need to backslash these characters whenever you want to use them literally.



                             if you want to match ".", you'd have to write \..

                            [a-Z]	Matches any one character from lowercase a to uppercase Z.
                            [a-z0-9]	Matches a single character between a and z or between 0 and 9.

        Word Boundaries
                /d

            Regular expressions help in validation of text strings which are of programmer’s interest.
            It offers a powerful tool for analyzing, searching a pattern and modifying the text data.

            With the help of in-built regexes functions, easy and simple solutions are provided for identifying patterns.
            It effectively saves a lot of development time, which are in search of specific string pattern.
            It helps in important user information validations like email address, phone numbers and IP address.



            https://support.google.com/looker-studio/answer/9366536?hl=en&ref_topic=7041728
