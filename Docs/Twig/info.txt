 
        Twig
            =>Twig is the flexible, fast, and secure template engine for PHP.
            =>Twig is both designer and developer friendly by sticking to PHP's principles and adding functionality useful for templating environments.

                -> fast
                    Twig compiles templates down to plain optimized PHP code. The overhead compared to regular PHP code was reduced to the very minimum.
                -> Secure:
                    Twig has a sandbox mode to evaluate untrusted template code. This allows Twig to be used as a template language for applications where users may modify the template design.

                -> Flexible:
                    Twig is powered by a flexible lexer and parser. This allows the developer to define their own custom tags and filters, and to create their own DSL.

             =>Twig is used by many Open-Source projects like Symfony, Drupal8, eZPublish, phpBB, Matomo, OroCRM; and many frameworks have support for it as well like Slim, Yii, Laravel, and Codeigniter â€” just to name a few.


    Twig 3.x needs at least PHP 7.2.5 to run.

    Installation

        The recommended way to install Twig is via Composer:

            sudo apt install composer

            composer require "twig/twig:^3.0"



            Example

                $loader = new \Twig\Loader\FilesystemLoader('/path/to/templates');
                $twig = new \Twig\Environment($loader, [
                    'cache' => '/path/to/compilation_cache',
                ]);

                echo $twig->render('index.html', ['name' => 'Fabien']);


    Twig for Template Designers

        -A template contains variables or expressions, which get replaced with values when the template is evaluated, and tags, which control the template's logic.



        <!DOCTYPE html>
            <html>
                <head>
                    <title>My Webpage</title>
                </head>
                <body>
                    <ul id="navigation">
                    {% for item in navigation %}
                        <li><a href="{{ item.href }}">{{ item.caption }}</a></li>
                    {% endfor %}
                    </ul>

                    <h1>My Webpage</h1>
                    {{ a_variable }}
                </body>
            </html>




            There are two kinds of delimiters: {% ... %} and {{ ... }}. The first one is used to execute statements such as for-loops, the latter outputs the result of an expression.


            Variables

                The application passes variables to the templates for manipulation in the template.

                 Variables may have attributes or elements you can access, too.


                 Use a dot (.) to access attributes of a variable
                        {{ foo.bar }}


            Implementation

                    -check if foo is an array and bar a valid element;
                    -if not, and if foo is an object, check that bar is a valid property;
                    -if not, and if foo is an object, check that bar is a valid method
                    -if not, and if foo is an object, check that getBar is a valid method;
                    -if not, and if foo is an object, check that isBar is a valid method;
                    -if not, return a null value.


                    -The attribute function is also useful when the attribute contains special characters (like - that would be interpreted as the minus operator):

                    {{ attribute(foo, 'data-foo') }}


                 Global Variables

                -_self: references the current template name;

                -_context: references the current context;

                -_charset: references the current charset.

               Setting Variables
                    -You can assign values to variables inside code blocks. Assignments use the set tag:

                    -    {% set foo = 'foo' %}
                    -    {% set foo = [1, 2] %}
                    -   {% set foo = {'foo': 'bar'} %}

              Filters

                    -Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|). Multiple filters can be chained.

                    {{ name|striptags|title }}


                    -Filters that accept arguments have parentheses around the arguments
                            {{ list|join(', ') }}

                           {% apply upper %}
                                This text becomes uppercase
                            {% endapply %}


               Functions
                    Functions can be called to generate content. Functions are called by their name followed by parentheses (()) and may have arguments.

                    range(0, 3)


                    {% for i in range(0, 3) %}
                        {{ i }},
                    {% endfor %}


               Control Structure


                A control structure refers to all those things that control the flow of a program - conditionals (i.e. if/elseif/else), for-loops, as well as things like blocks. Control structures appear inside {% ... %} blocks.


                <h1>Members</h1>
                <ul>
                    {% for user in users %}
                        <li>{{ user.username|e }}</li>
                    {% endfor %}
                </ul>

                The if tag can be used to test an expression:


                {% if users|length > 0 %}
                    <ul>
                        {% for user in users %}
                            <li>{{ user.username|e }}</li>
                        {% endfor %}
                    </ul>
                {% endif %}






                Comments

                To comment-out part of a line in a template, use the comment syntax {# ...
                        {# note: disabled template because we no longer use this
                            {% for user in users %}
                                ...
                            {% endfor %}
                        #}

               Including other Templates

                     useful to include a template and return the rendered content of that template into the current one:

                     {{ include('sidebar.html') }}

                The name of the template depends on the template loader. For instance, the \Twig\Loader\FilesystemLoader allows you to access other templates by giving the filename. You can access templates in subdirectories with a slash:

                {{ include('sections/articles/sidebar.html') }}


             Template Inheritance

                -The most powerful part of Twig is template inheritance.
                -Template inheritance allows you to build a base "skeleton" template that contains all the common elements of your site and defines blocks that child templates can override.

                    {% block head %}

                    {% endblock %}

                    {% block content %}
                    {% endblock %}

            In this example, the block tags define four blocks that child templates can fill in. All the block tag does is to tell the template engine that a child template may override those portions of the template.

                {% extends "base.html" %}

                {% block title %}Index{% endblock %}
                {% block head %}
                    {{ parent() }}
                    <style type="text/css">
                        .important { color: #336699; }
                    </style>
                {% endblock %}
                {% block content %}
                    <h1>Index</h1>
                    <p class="important">
                        Welcome to my awesome homepage.
                    </p>
                {% endblock %}


                It's possible to render the contents of the parent block by using the parent function.

                    {% block sidebar %}
                        <h3>Table Of Contents</h3>
                        ...
                        {{ parent() }}
                    {% endblock %}


                    base.html
                    <!DOCTYPE html>
                    <html>
                        <head>
                            {% block head %}
                                <link rel="stylesheet" href="style.css"/>
                                <title>{% block title %}{% endblock %} - My Webpage</title>
                            {% endblock %}
                        </head>
                        <body>
                            <div id="content">{% block content %}{% endblock %}</div>
                            <div id="footer">
                                {% block footer %}
                                    &copy; Copyright 2011 by <a href="http://domain.invalid/">you</a>.
                                {% endblock %}
                            </div>
                        </body>
                    -Twig also supports multiple inheritance via "horizontal reuse" with the help of the use tag.


               HTML Escaping
                    Working with Manual Escaping
                        If manual escaping is enabled, it is your responsibility to escape variables if needed. What to escape? Any variable that comes from an untrusted source.

                            {{ user.username|e }}
                            {{ user.username|e('js') }}
                            {{ user.username|e('css') }}
                            {{ user.username|e('url') }}
                            {{ user.username|e('html_attr') }}

                    Working with Automatic Escaping

                        Whether automatic escaping is enabled or not, you can mark a section of a template to be escaped or not by using the autoescape tag:

                        {% autoescape %}
                            Everything will be automatically escaped in this block (using the HTML strategy)
                        {% endautoescape %}


                     Escaping

                            It is sometimes desirable or even necessary to have Twig ignore parts it would otherwise handle as variables or blocks.

                            {{ '{{' }}

                    Expressions
                            Twig allows expressions everywhere.
                            ?: (ternary operator), b-and, b-xor, b-or, or, and, ==, !=, <=>, <, >, >=, <=, in, matches, starts with, ends with, has every, has some, .., +, -, ~, *, /, //, %, is (tests), **, ??, | (filters), [], and .:

                            {% set greeting = 'Hello ' %}

                            {{ greeting ~ name|lower }}   {# Hello fabien #}

                            {{ (greeting ~ name)|lower }} {# hello fabien #}


                   Literals
                        -["foo", "bar"]: Arrays are defined by a sequence of expressions separated by a comma (,) and wrapped with squared brackets ([]).
                        -42 / 42.23: Integers and floating point numbers are created by writing the number down. If a dot is present the number is a float, otherwise an integer.
                        -"Hello World": Everything between two double or single quotes is a string. T
                        -{"foo": "bar"}: Hashes are defined by a list of keys and values separated by a comma (,) and wrapped with curly braces ({}):

                        {# keys as string #}
                            { 'foo': 'foo', 'bar': 'bar' }
                        {# keys as names (equivalent to the previous hash) #}
                            { foo: 'foo', bar: 'bar' }
                        {# keys as integer #}
                            { 2: 'foo', 4: 'bar' }

                        {# keys as expressions (the expression must be enclosed into parentheses) #}
                            {% set foo = 'foo' %}

                Math
                    Twig allows you to do math in templates; the following operators are supported:
                     - +: Adds two numbers together (the operands are casted to numbers). {{
                        1 + 1 }} is 2.

                        -: Subtracts the second number from the first one. {{ 3 - 2 }} is 1.
                        /: Divides two numbers. The returned value will be a floating point number. {{ 1 / 2 }} is {{ 0.5 }}.
                        %: Calculates the remainder of an integer division. {{ 11 % 7 }} is 4.
                        //: Divides two numbers and returns the floored integer result. {{ 20
                                        // 7 }} is 2, {{ -20  // 7 }} is -3

                        *: Multiplies the left operand with the right one. {{ 2 * 2 }} would return 4.
                        **: Raises the left operand to the power of the right operand. {{ 2 **3 }} would return 8.

                Logic

                    -and: Returns true if the left and the right operands are both true.
                    -or: Returns true if the left or the right operand is true.
                    -not: Negates a statement.

                Comparisons
                     ==, !=, <, >, >=, and <=.

                     {% if 'Fabien' starts with 'F' %}

                     {% endif %}
                    {% if 'Fabien' ends with 'n' %}
                    {% endif %}


                Containment Operator

                    -The in operator performs containment test. It returns true if the left operand is contained in the right:

                    {# returns true #}

                    {{ 1 in [1, 2, 3] }}

            Test Operator

                The is operator performs tests. Tests can be used to test a variable against a common expression

                {# find out if a variable is odd #}

                {{ name is odd }}

                {% if post.status is constant('Post::PUBLISHED') %}\





            Other Operators

                |: Applies a filter.
                ..: Creates a sequence based on the operand before and after the operator


                {{ 1..5 }}


                {# equivalent to #}
                {{ range(1, 5) }}

                -Note that you must use parentheses when combining it with the filter operator due to the o

                (1..5)|join(', ')



                ~: Converts all operands into strings and concatenates them. {{ "Hello
                        " ~ name ~ "!" }} would return (assuming name is 'John')

                        Hello John!.

                 ., []: Gets an attribute of a variable.


                 ?:: The ternary operator:

                    { foo ? 'yes' : 'no' }}

                ??: The null-coalescing operator:
                        {# returns the value of foo if it is defined and not null, 'no' otherwise #}
                            {{ foo ?? 'no' }}

    String Interpolation
        String interpolation (#{expression}) allows any valid expression to appear within a double-quoted string. The result of evaluating that expression is inserted into the string:

        {{ "foo #{bar} baz" }}
        {{ "foo #{1 + 2} baz" }}


        Whitespace Control
            -Whitespace trimming via the - modifier: Removes all whitespace (including newlines);
            -Line whitespace trimming via the ~ modifier: Removes all whitespace (excluding newlines). Using this modifier on the right disables the default removal of the first newline inherited from PHP.


            {%- or -%}

            {% set value = 'no spaces' %}

            {#- No leading/trailing whitespace -#}

            {{- value }}    </li>
            {# outputs '<li>no spaces    </li>' #}


               {{~ value }}    </li>
                {# outputs '<li>\nno spaces    </li>' #}



                {% apply spaceless %}
                    <div>
                        <strong>foo bar</strong>
                    </div>
                {% endapply %}









  Coding Standards

        -Put one (and only one) space after the start of a delimiter ({{, {%, and {#) and before the end of a delimiter (}}, %}, and #}):
        {{ foo }}
        {# comment #}
        {% if foo %}{% endif %}

        -When using the whitespace control character, do not put any spaces between it and the delimiter:
        {{- foo -}}

        -Put one (and only one) space before and after the following operators: comparison operators (==, !=, <, >, >=, <=), math operators (+, -, /, *, %, //, **), logic operators (not, and, or), ~, is, in, and the ternary operator (?:):
            {{ 1 + 2 }}
            {{ foo ~ bar }}
            {{ true ? true : false }}
         -Put one (and only one) space after the : sign in hashes and , in arrays and hashes:
            {{ [1, 2, 3] }}
            {{ {'foo': 'bar'} }}
        -Do not put any spaces after an opening parenthesis and before a closing parenthesis in expressions:
            {{ 1 + (2 * 3) }}
         -Do not put any spaces before and after string delimiters:

            {% block foo %}
                {% if true %}
                    true
                {% endif %}
            {% endblock %}




Tags
        apply
            -{% apply upper %}
            {{my_var}}
            {% endapply %}
        block
            -Blocks are used for inheritance and act as placeholders and replacements at the same time. They are documented in detail in the documentation for the extends tag.

            -Block names must consist of alphanumeric characters, and underscores. The first char can't be a digit and dashes are not permitted.

            When a template uses inheritance and if you want to print a block multiple times, use the block function:


            <title>{% block title %}{% endblock %}</title>


        parent

            -When a template uses inheritance, it's possible to render the contents of the parent block when overriding a block by using the parent function:

            {% block sidebar %}
                <h3>Table Of Contents</h3>
                ...
                {{ parent() }}
            {% endblock %}

        use
            -Horizontal reuse is an advanced Twig feature that is hardly ever needed in regular templates. It is mainly used by projects that need to make template blocks reusable without using inheritance.



            {% use "blocks.html" %}

         extends
            the extends tag can be used to extend a template from another one.
             {% extends "base.html" %}


        cache
            -The cache tag tells Twig to cache a template fragment:

            {% cache "cache key" %}
            Cached forever

            {% endcache %}

           Specify an expiration in seconds via the ttl()


            {% cache "cache key" ttl(300) %}
                Cached for 300 seconds
            {% endcache %}

         deprecated
            Twig generates a deprecation notice (via a call to the trigger_error() PHP function) where the deprecated tag is used in a template:

         do
                {% do 1 + 2 %}

         embed
            The embed tag combines the behavior of include and extends. It allows you to include another template's contents, just like include does

                    {% embed "teasers_skeleton.twig" %}
            {# These blocks are defined in "teasers_skeleton.twig" #}
            {# and we override them right here:                    #}
            {% block left_teaser %}
                Some content for the left teaser box
            {% endblock %}
            {% block right_teaser %}
                Some content for the right teaser box
            {% endblock %}
        {% endembed %}
            he embed tag takes the exact same arguments as the include tag:
            {% embed "base" with {'foo': 'bar'} %}
                ...
            {% endembed %}

            {% embed "base" with {'foo': 'bar'} only %}
                ...
            {% endembed %}

            {% embed "base" ignore missing %}
                ...
            {% endembed %}

         flush
            The flush tag tells Twig to flush the output buffer:

         for
            Loop over each item in a sequence.
            <h1>Members</h1>
                <ul>
                    {% for user in users %}
                        <li>{{ user.username|e }}</li>
                    {% endfor %}
                </ul>


            The `loop` variable


                Variable	Description
                loop.index	The current iteration of the loop. (1 indexed)
                loop.index0	The current iteration of the loop. (0 indexed)
                loop.revindex	The number of iterations from the end of the loop (1 indexed)
                loop.revindex0	The number of iterations from the end of the loop (0 indexed)
                loop.first	True if first iteration
                loop.last	True if last iteration
                loop.length	The number of items in the sequence
                loop.parent	The parent context

          The `else` Clause
            If no iteration took place because the sequence was empty, you can render a replacement block by using else:

         iterating over Keys
            <h1>Members</h1>
            <ul>
                {% for key in users|keys %}
                    <li>{{ key }}</li>
                {% endfor %}
            </ul>

         Iterating over Keys and Values
                  {% for key, user in users %}
          Iterating over a Subset
               {% for user in users|slice(0, 10) %}

      from

        =>macro
                Macros are defined in regular templates.
                Imagine having a generic helper template that define how to render HTML forms via macros (called forms.html):

                form.html

                {% macro input(name, value, type = "text", size = 20) %}
                    <input type="{{ type }}" name="{{ name }}" value="{{ value|e }}" size="{{ size }}"/>
                {% endmacro %}

                twig file

                {% import "forms.html" as forms %}
                {% from 'forms.html' import input as input_field, textarea %}
                <p>{{ forms.input('username') }}</p>
                <p>{{ forms.input('password', null, 'password') }}</p>
                <p>{{ forms.input('email') }}</p>
                <p>{{ textarea('comment') }}</p>


                {% if macros.forms is defined -%}
                    OK
                {% endif %}


          sandbox
            -The sandbox tag can be used to enable the sandboxing mode for an included template, when sandboxing is not enabled globally for the Twig environment:

            {% sandbox %}
                {% include 'user.html' %}
            {% endsandbox %}

        set

            Inside code blocks you can also assign values to variables. Assignments use the set tag and can have multiple targets.\
            {% set foo = 'bar' %}
            \
        use
            Template inheritance is one of the most powerful features of Twig but it is limited to single inheritance; a template can only extend one other template.

            {% use "blocks.html" %}

            use - Documentation - Twig - The flexible, fast, and secure PHP template engine

       verbatim

            The verbatim tag marks sections as being raw text that should not be parsed.


        with

            Use the with tag to create a new inner scope. Variables set within this scope are not visible outside of the scope:

            {% with %}
                {% set foo = 42 %}
                {{ foo }} {# foo is 42 here #}
            {% endwith %}
        if
            The if statement in Twig is comparable with the if statements of PHP.
                {% if online == false %}
            <p>Our website is in maintenance mode. Please, come back later.</p>
        {% endif %}

        include
            The include statement includes a template and outputs the rendered content of that file:

            {% include 'header.html' %}
                Body
            {% include 'footer.html' %}
