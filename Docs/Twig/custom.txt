->Twig can be extended in many ways; you can add extra tags, filters, tests, operators, global variables, and functions.

Twig has two main language constructs:

    -{{ }}: used to print the result of an expression evaluation;
    -{% %}: used to execute statements.

   Globals
        -A global variable is like any other template variable, except that it's available in all templates and macros:7

        $twig = new \Twig\Environment($loader);
        $twig->addGlobal('text', new Text());


   Filters
        Creating a filter consists of associating a name with a PHP callable:

        / an anonymous function
            $filter = new \Twig\TwigFilter('rot13', function ($string) {
                return str_rot13($string);
            });

        // or a simple PHP function
        $filter = new \Twig\TwigFilter('rot13', 'str_rot13');


        // or a class static method
        $filter = new \Twig\TwigFilter('rot13', ['SomeClass', 'rot13Filter']);



        -The first argument passed to the \Twig\TwigFilter constructor is the name of the filter you will use in templates and the second one is the PHP callable to associate with it.

        $twig->addFilter($filter);



        ===Environment-aware Filters

        If you want to access the current environment instance in your filter, set the needs_environment option to true; Twig will pass the current environment as the first argument to the filter call:

            $filter = new \Twig\TwigFilter('rot13', function (\Twig\Environment $env, $string) {
            // get the current charset for instance
            $charset = $env->getCharset();

            return str_rot13($string);
        }, ['needs_environment' => true]);



        Context-aware Filters


            If you want to access the current context in your filter, set the needs_context option to true; Twig will pass the current context as the first argument to the filter call (or the second one if needs_environment is also set to true):

            $filter = new \Twig\TwigFilter('rot13', function ($context, $string) {
                // ...
            }, ['needs_context' => true]);

         Automatic Escaping

            If automatic escaping is enabled, the output of the filter may be escaped before printing. If your filter acts as an escaper (or explicitly outputs HTML or JavaScript code), you will want the raw output to be printed.


        Variadic Filters

            When a filter should accept an arbitrary number of arguments, set the is_variadic option to true; Twig will pass the extra arguments as the last argument to the filter call as an array:

           $filter = new \Twig\TwigFilter('thumbnail', function ($file, array $options = []) {
            // ...
            }, ['is_variadic' => true]);

       Dynamic Filters
            A filter name containing the special * character is a dynamic filter and the * part will match any string:

            $filter = new \Twig\TwigFilter('*_path', function ($name, $arguments) {
                // ...
            });

       Deprecated Filters
        You can mark a filter as being deprecated by setting the deprecated option to true. You can also give an alternative filter that replaces the deprecated one when that makes sense:

        $filter = new \Twig\TwigFilter('obsolete', function () {
            // ...
        }, ['deprecated' => true, 'alternative' => 'new_one']);






        Functions

        Functions are defined in the exact same way as filters, but you need to create an instance of \Twig\TwigFunction:


        $function = new \Twig\TwigFunction('function_name', function () {
            // ...
        });
        $twig->addFunction($function);


        Tests


        Tests are defined in the exact same way as filters and functions, but you need to create an instance of \Twig\TwigTest:

        $twig = new \Twig\Environment($loader);
        $test = new \Twig\TwigTest('test_name', function () {
            // ...
        });

        $twig->addTest($test);


        //EXAMPLE

            $test = new \Twig\TwigTest('red', function ($value) {
                if (isset($value->color) && $value->color == 'red') {
                    return true;
                }
                if (isset($value->paint) && $value->paint == 'red') {
                    return true;
                }
                return false;
            });
            $twig->addTest($test);
