


   - Every developer strives to write maintainable, readable, and reusable code. Code structuring becomes more important as applications become larger. Design patterns prove crucial to solving this challenge - providing an organization structure for common issues in a particular circumstance.


   Module Design Pattern in JavaScript

    -JavaScript modules are the most prevalently used design patterns for keeping particular pieces of code independent of other components. This provides loose coupling to support well-structured code.

    Modules should be Immediately-Invoked-Function-Expressions (IIFE) to allow for private scopes - that is, a closure that protect variables and methods

            (function() {

            // declare private variables and/or functions

            return {
                // declare public variables and/or functions
            }

        })();
            var HTMLChanger = (function() {
                var contents = 'contents'

                var changeHTML = function() {
                var element = document.getElementById('attribute-to-change');
                //element.innerHTML = contents;
                element=contents;
                }

                return {
                callChangeHTML: function() {
                    changeHTML();
                    console.log(contents);
                }
                };

            })();

        Revealing Module Pattern

        -A variation of the module pattern is called the Revealing Module Pattern
        -he purpose is to maintain encapsulation and reveal certain variables and methods returned in an object literal.


        var Exposer = (function() {
            var privateVariable = 10;

            var privateMethod = function() {
            console.log('Inside a private method!');
            privateVariable++;
            }

            var methodToExpose = function() {
            console.log('This is a method I want to expose!');
            }

            var otherMethodIWantToExpose = function() {
            privateMethod();
            }

            return {
                first: methodToExpose,
                second: otherMethodIWantToExpose
            };
        })();

        Exposer.first();        // Output: This is a method I want to expose!
        Exposer.second();       // Output: Inside a private method!
        Exposer.methodToExpose; // undefined





        Publish/Subscribe

        The Publish/Subscribe pattern, however, uses a topic/event channel that sits between the objects wishing to receive notifications (subscribers) and the object firing the event (the publisher).
        This event system allows code to define application-specific events that can pass custom arguments containing values needed by the subscriber.
